<<< TO DO >>>

[IN PROGRESS] --> Basic lighting
	--> frag shader lighting

[FIRST IMPLEMENTATION] --> Global Buffer Allocation implementation
	--> One big vertex buffer
	### Could not implement this and decided to move on to other things for now
	### Problem was that each mesh (GLTF) can have multiple primitives and reasoning
	### about how to represent these in one big vertex buffer was too complicated for me.

	### Implemented basic suballocator that simply increments offset when suballocating,
	### returing that offset when a suballocation is requested. Currently has no way
	### to free allocations and reuse that space.

--> Investigate making a device struct that includes both VkDevice handle and
	DeviceDispatch

--> Entity manager

--> PBR

--> Screen to world raycasting

--> Application Level API
	--> Renderable struct 

<<< BUGS >>>

--> Vulkan warning about descriptor sets that aren't destroyed

<<< CLEANUP >>>

--> Indent member function and variables and group them logically

--> [LOW PRIO] Remove usage of STL containers and replace with pure arrays
	--> Benchmark this to find out if it is even worth doing

--> [LOW PRIO] Purge std::shared_ptr and std::unique_ptr from codebase
	--> Use normal pointers because we are in the wild west


<<< COMPLETED >>>

--> Game directory
	--> Now that the renderer has full potential functionality (already static linked as library)
		start making the game files as well

