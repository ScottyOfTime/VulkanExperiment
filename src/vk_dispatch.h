#ifndef VK_DISPATCH_H
#define VK_DISPATCH_H

#include <vulkan/vulkan.h>

struct InstanceDispatch {
	PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;

	PFN_vkCreateInstance vkCreateInstance;
	PFN_vkDestroyInstance vkDestroyInstance;

	PFN_vkCreateDevice vkCreateDevice;

	PFN_vkDestroySurfaceKHR vkDestroySurfaceKHR;

	PFN_vkEnumeratePhysicalDevices vkEnumeratePhysicalDevices;
	PFN_vkEnumerateDeviceExtensionProperties vkEnumerateDeviceExtensionProperties;
	PFN_vkGetPhysicalDeviceProperties2 vkGetPhysicalDeviceProperties2;
	PFN_vkGetPhysicalDeviceFeatures vkGetPhysicalDeviceFeatures;

	PFN_vkGetPhysicalDeviceQueueFamilyProperties vkGetPhysicalDeviceQueueFamilyProperties;
	PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR;
	PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR;
	PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR;
};

void load_instance_dispatch_table(InstanceDispatch *disp, PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr, VkInstance inst);

struct DeviceDispatch {
	PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr;
	PFN_vkDestroyDevice vkDestroyDevice;

	PFN_vkGetDeviceQueue vkGetDeviceQueue;

	PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;
	PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;

	PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;

	PFN_vkCreateImageView vkCreateImageView;
	PFN_vkDestroyImageView vkDestroyImageView;

	PFN_vkCreateCommandPool vkCreateCommandPool;
	PFN_vkDestroyCommandPool vkDestroyCommandPool;

	PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers;

	PFN_vkCreateFence vkCreateFence;
	PFN_vkDestroyFence vkDestroyFence;

	PFN_vkCreateSemaphore vkCreateSemaphore;
	PFN_vkDestroySemaphore vkDestroySemaphore;

	PFN_vkWaitForFences vkWaitForFences;
	PFN_vkResetFences vkResetFences;

	PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;

	PFN_vkResetCommandBuffer vkResetCommandBuffer;
	PFN_vkBeginCommandBuffer vkBeginCommandBuffer;
	PFN_vkEndCommandBuffer vkEndCommandBuffer;

	PFN_vkCmdClearColorImage vkCmdClearColorImage;

	PFN_vkQueueSubmit2 vkQueueSubmit2;
	PFN_vkCmdPipelineBarrier2 vkCmdPipelineBarrier2;
	PFN_vkQueuePresentKHR vkQueuePresentKHR;
};

void load_device_dispatch_table(DeviceDispatch *disp, PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr, VkInstance inst, VkDevice dev);

#endif /* VK_DISPATCH_H */
